# main()
snippet main
	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #include <linux/...>
snippet linc
	#include <linux/${1:stdio}.h>${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# This is kind of convenient
snippet .
	[${1}]${2}
# Kernel stuff
snippet un
	unsigned
snippet zalloc
	(struct ${1:type} *)zalloc(${2:zone});
snippet bcpy
	bcopy(${1:src}, ${2:dst}, ${3:sz});
snippet sl
	lck_spin_lock(&${1:lock});
	lck_spin_unlock(&$1);
snippet ml
	lck_mtx_lock(&${1:lock});
	lck_mtx_unlock(&${1});
# XNU stuff
snippet sysctl
	static int sysctl_${1:name} SYSCTL_HANDLER_ARGS
	{
	#pragma unused(oidp, arg1, arg2)
		int error;
		${2:type} ${3:var};

		error = SYSCTL_IN(req, &${3}, sizeof(${3});
		if (error != 0)
			return error;
	}

	SYSCTL_PROC(_${4:kern}, OID_AUTO, ${1}, CTLTYPE_${5:INT} | CTLFLAG_RW | CTLFLAG_LOCKED,
		    ${6:NULL}, 0, sysctl_${1}, "${7:I}", "${8:descrip}");
snippet sysctli
	SYSCTL_INT(_${1:kern}, OID_AUTO, ${2:name}, CTLFLAG_${3:RW} | CTLFLAG_LOCKED, &${2}_val, 0, "${4}");
snippet sysctlu
	SYSCTL_UINT(_${1:kern}, OID_AUTO, ${2:name}, CTLFLAG_${3:RW} | CTLFLAG_LOCKED, &${2}_val, 0, "${4}");
snippet sysctll
	SYSCTL_LONG(_${1:kern}, OID_AUTO, ${2:name}, CTLFLAG_${3:RW} | CTLFLAG_LOCKED, &${2}_val, "${4}");
snippet sysctlq
	SYSCTL_QUAD(_${1:kern}, OID_AUTO, ${2:name}, CTLFLAG_${3:RW} | CTLFLAG_LOCKED, &${2}_val, "${4}");
snippet sysctls
	SYSCTL_STRING(_${1:kern}, OID_AUTO, ${2:name}, CTLFLAG_${3:RW} | CTLFLAG_LOCKED, &${4:var}, sizeof(${4}), "${5}");
